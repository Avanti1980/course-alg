def ford_fulkerson(c):

    # 初始化流值为零
    f = dict()
    for u in c:
        f[u] = dict()
    for u in c:
        for v in c[u]:
            f[u][v] = 0

    i = 1
    while True:

        print("第%d轮" % i)
        print("当前的流:", f)

        # 计算残存网络
        c_f = dict()
        for u in c:
            c_f[u] = dict()
        for u in c:
            for v in c[u]:
                if f[u][v] == c[u][v]:             # 满流量
                    c_f[v][u] = c[u][v]
                elif f[u][v] == 0:                 # 无流量
                    c_f[u][v] = c[u][v]
                else:
                    c_f[u][v] = c[u][v] - f[u][v]  # 正向边容量等于剩余容量
                    c_f[v][u] = f[u][v]            # 反向边容量等于当前流量
        print("残存网络:", c_f)

        # 寻找增广路径
        pre, visited, stack = dict(), [], ["s"]    # 前驱表 访问标记 用于DFS的栈
        while stack:
            node = stack.pop()
            visited.append(node)
            for neighbor in c_f[node].keys():      # 残存网络中node的邻接点
                if neighbor not in visited:
                    stack.append(neighbor)
                    pre[neighbor] = node
                    if neighbor == "t":
                        break

        if "t" not in pre.keys():  # 若汇点、源点已不再连通
            max_f = 0
            for v in f["s"].keys():
                max_f += f["s"][v]
            print("最大流值为%d" % max_f)
            return

        key, path = "t", []
        while True:                # 根据DFS的前驱表生成增广路径
            path.append((pre[key], key))
            key = pre[key]
            if key == "s":
                break
        path.reverse()
        print("增广路径:", path)

        # 确定残存容量
        c_f_p = float("inf")
        for u, v in path:
            if c_f_p > c_f[u][v]:
                c_f_p = c_f[u][v]
        print("残存容量:", c_f_p)

        # 修改流值
        for u, v in path:
            if v in f[u].keys():
                f[u][v] += c_f_p
            else:
                f[v][u] -= c_f_p

        i += 1


c = {                            # 容量
    "s": {"v1": 16, "v2": 13},   # c(s,v1) = 16, c(s,v2) = 13          v1 -- v3
    "v1": {"v3": 12},            # c(v1,v3) = 12                     / |   / | \
    "v2": {"v1": 4, "v4": 14},   # c(v2,v1) = 4, c(v2,v4) = 14     s   |  /  |  t
    "v3": {"v2": 9, "t": 20},    # c(v3,v2) = 9, c(v3,t) = 20        \ | /   | /
    "v4": {"v3": 7, "t": 4},     # c(v4,v3) = 7, c(v4,t) = 4          v2 -- v4
    "t": {}
}
ford_fulkerson(c)
# ----------------------------------------------------------
# 第1轮
# 当前的流: {'s': {'v1': 0, 'v2': 0}, 'v1': {'v3': 0}, 'v2': {'v1': 0, 'v4': 0}, 'v3': {'v2': 0, 't': 0}, 'v4': {'v3': 0, 't': 0}, 't': {}}
# 残存网络: {'s': {'v1': 16, 'v2': 13}, 'v1': {'v3': 12}, 'v2': {'v1': 4, 'v4': 14}, 'v3': {'v2': 9, 't': 20}, 'v4': {'v3': 7, 't': 4}, 't': {}}
# 增广路径: [('s', 'v2'), ('v2', 'v4'), ('v4', 't')]
# 残存容量: 4
# 第2轮
# 当前的流: {'s': {'v1': 0, 'v2': 4}, 'v1': {'v3': 0}, 'v2': {'v1': 0, 'v4': 4}, 'v3': {'v2': 0, 't': 0}, 'v4': {'v3': 0, 't': 4}, 't': {}}
# 残存网络: {'s': {'v1': 16, 'v2': 9}, 'v1': {'v3': 12}, 'v2': {'s': 4, 'v1': 4, 'v4': 10}, 'v3': {'v2': 9, 't': 20}, 'v4': {'v2': 4, 'v3': 7}, 't': {'v4': 4}}
# 增广路径: [('s', 'v2'), ('v2', 'v4'), ('v4', 'v3'), ('v3', 't')]
# 残存容量: 7
# 第3轮
# 当前的流: {'s': {'v1': 0, 'v2': 11}, 'v1': {'v3': 0}, 'v2': {'v1': 0, 'v4': 11}, 'v3': {'v2': 0, 't': 7}, 'v4': {'v3': 7, 't': 4}, 't': {}}
# 残存网络: {'s': {'v1': 16, 'v2': 2}, 'v1': {'v3': 12}, 'v2': {'s': 11, 'v1': 4, 'v4': 3}, 'v3': {'v2': 9, 't': 13, 'v4': 7}, 'v4': {'v2': 11}, 't': {'v3': 7, 'v4': 4}}
# 增广路径: [('s', 'v2'), ('v2', 'v1'), ('v1', 'v3'), ('v3', 't')]
# 残存容量: 2
# 第4轮
# 当前的流: {'s': {'v1': 0, 'v2': 13}, 'v1': {'v3': 2}, 'v2': {'v1': 2, 'v4': 11}, 'v3': {'v2': 0, 't': 9}, 'v4': {'v3': 7, 't': 4}, 't': {}}
# 残存网络: {'s': {'v1': 16}, 'v1': {'v3': 10, 'v2': 2}, 'v2': {'s': 13, 'v1': 2, 'v4': 3}, 'v3': {'v1': 2, 'v2': 9, 't': 11, 'v4': 7}, 'v4': {'v2': 11}, 't': {'v3': 9, 'v4': 4}}
# 增广路径: [('s', 'v1'), ('v1', 'v3'), ('v3', 't')]
# 残存容量: 10
# 第5轮
# 当前的流: {'s': {'v1': 10, 'v2': 13}, 'v1': {'v3': 12}, 'v2': {'v1': 2, 'v4': 11}, 'v3': {'v2': 0, 't': 19}, 'v4': {'v3': 7, 't': 4}, 't': {}}
# 残存网络: {'s': {'v1': 6}, 'v1': {'s': 10, 'v2': 2}, 'v2': {'s': 13, 'v1': 2, 'v4': 3}, 'v3': {'v1': 12, 'v2': 9, 't': 1, 'v4': 7}, 'v4': {'v2': 11}, 't': {'v3': 19, 'v4': 4}}
# 最大流值为23

c = {                            # 容量                             v
    "s": {"u": 100, "v": 100},   # c(s,u) = 100, c(s,v) = 100    / | \
    "u": {"v": 1, "t": 100},     # c(u,v) = 1, c(u,t) = 100     s  |  t
    "v": {"t": 100},             # c(v,t) = 100                  \ | /
    "t": {}                      #                                 u
}
ford_fulkerson(c)
# ----------------------------------------------------------
# 第1轮
# 当前的流: {'s': {'u': 0, 'v': 0}, 'u': {'v': 0, 't': 0}, 'v': {'t': 0}, 't': {}}
# 残存网络: {'s': {'u': 100, 'v': 100}, 'u': {'v': 1, 't': 100}, 'v': {'t': 100}, 't': {}}
# 增广路径: [('s', 'v'), ('v', 't')]
# 残存容量: 100
# 第2轮
# 当前的流: {'s': {'u': 0, 'v': 100}, 'u': {'v': 0, 't': 0}, 'v': {'t': 100}, 't': {}}
# 残存网络: {'s': {'u': 100}, 'u': {'v': 1, 't': 100}, 'v': {'s': 100}, 't': {'v': 100}}
# 增广路径: [('s', 'u'), ('u', 't')]
# 残存容量: 100
# 第3轮
# 当前的流: {'s': {'u': 100, 'v': 100}, 'u': {'v': 0, 't': 100}, 'v': {'t': 100}, 't': {}}
# 残存网络: {'s': {}, 'u': {'s': 100, 'v': 1}, 'v': {'s': 100}, 't': {'u': 100, 'v': 100}}
# 最大流值为200
